import os
import aiohttp
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters
from telegram.ext import CommandHandler
from dotenv import load_dotenv

load_dotenv()

try:
    token = os.getenv('TOKEN')
    token_weather = os.getenv('TOKEN_WEATHER')
    if not token or not token_weather:
        raise EnvironmentError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TOKEN, TOKEN_WEATHER")
except Exception as e:
    print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:", e)
    exit(1)

def get_user_info(update: Update):
    chat_id = update.effective_chat.id
    user = update.effective_user
    user_id = user.id
    message = update.effective_message
    timestamp = int(message.date.timestamp())
    first_name = user.first_name or ''
    last_name = user.last_name or ''
    full_name = f'{first_name} {last_name}'.strip()
    ava_str = f'{user.username or "no_username"}_{user_id}_{first_name[:2]}_{timestamp}'
    ava_url_cat = f'https://robohash.org/{ava_str}?set=set4'
    return {
        'chat_id': chat_id,
        'first_name': first_name,
        'full_name': full_name,
        'ava_url_cat': ava_url_cat,
        'user_id': user_id,
        'username': user.username,
        'timestamp': timestamp
    }

async def say_hi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_info = get_user_info(update)
    text = update.message.text
    
    if text == '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∞–≤–∞—Ç–∞—Ä':
        try:
            await context.bot.send_photo(
                chat_id=user_info['chat_id'],
                photo=user_info['ava_url_cat']
            )
        except Exception as e:
            await context.bot.send_message(
                chat_id=user_info['chat_id'],
                text='–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤–∞—Ç–∞—Ä–∞'
            )
    elif text == '–ú–æ–π ID':
        await context.bot.send_message(
            chat_id=user_info['chat_id'],
            text=f"–í–∞—à Telegram user ID: {user_info['user_id']}"
        )

    elif text == '–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è':
        await request_location(update, context)
    elif text == '–§–æ—Ç–æ –∫–æ—Ç–∏–∫–∞':
        await send_cat_photo(update, context)
    elif text.lower().startswith('—Ä–∞–Ω–¥–æ–º') or text.lower().startswith('—Å–ª—É—á–∞–π–Ω'):
        await send_random_digit(update, context, user_info)
    else:
        await context.bot.send_message(
            chat_id=user_info['chat_id'],
            text=f"{user_info['first_name']}, –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?\n"
                 f"–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                 f"ID: {user_info['user_id']}\n"
                 f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{user_info['username']}"
        )

async def wake_up(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_info = get_user_info(update)
    button = ReplyKeyboardMarkup([
        ['–§–æ—Ç–æ –∫–æ—Ç–∏–∫–∞', '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∞–≤–∞—Ç–∞—Ä'],
        ['–ú–æ–π ID', '–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ'],
        ['–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è']
    ], resize_keyboard=True)
    await context.bot.send_message(
        chat_id=user_info['chat_id'],
        text=f'–ü—Ä–∏–≤–µ—Ç {user_info["username"]}, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!',
        reply_markup=button
    )

async def my_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_info = get_user_info(update)
    await context.bot.send_message(
        chat_id=user_info['chat_id'],
        text=f"–í–∞—à Telegram user ID: {user_info['user_id']}"
    )

async def request_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_info = get_user_info(update)
    location_keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã üìç', request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await context.bot.send_message(
        chat_id=user_info['chat_id'],
        text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π:',
        reply_markup=location_keyboard
    )
async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    location = update.message.location
    if location is None:
        await update.message.reply_text("–õ–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.")
        return
    latitude = location.latitude
    longitude = location.longitude
    context.user_data['location'] = (latitude, longitude)
    try:
        weather_report = await get_weather(latitude, longitude)
    except Exception as e:
        weather_report = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ."
    await update.message.reply_text(weather_report)
    main_menu = ReplyKeyboardMarkup(
        [
            ['–§–æ—Ç–æ –∫–æ—Ç–∏–∫–∞', '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∞–≤–∞—Ç–∞—Ä'],
            ['–ú–æ–π ID', '–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ'],
            ['–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è']
        ],
        resize_keyboard=True
    )
    await update.message.reply_text('üòé', reply_markup=main_menu)

async def get_weather(lat: float, lon: float) -> str:
    url = f'https://api.openweathermap.org/data/2.5/weather?APPID={token_weather}&lang=ru&units=metric&lat={lat}&lon={lon}'
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ'
                data = await resp.json()
    except Exception as e:
        return '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ–≥–æ–¥—ã.'
    
    try:
        city = data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ')
        weather = data['weather'][0]['description']
        temp = data['main']['temp']
        feels_like = data['main']['feels_like']
        wind_speed = data['wind']['speed']
        if wind_speed < 5:
            wind_recom = '–í–µ—Ç—Ä–∞ –ø–æ—á—Ç–∏ –Ω–µ—Ç, –ø–æ–≥–æ–¥–∞ —Ö–æ—Ä–æ—à–∞—è, –≤–µ—Ç—Ä–∞ –ø–æ—á—Ç–∏ –Ω–µ—Ç'
        elif wind_speed < 10:
            wind_recom = '–ù–∞ —É–ª–∏—Ü–µ –Ω–µ–º–Ω–æ–≥–æ –≤–µ—Ç—Ä–µ–Ω–æ, –æ–¥–µ–Ω—å—Ç–µ—Å—å —á—É—Ç—å —Ç–µ–ø–ª–µ–µ'
        elif wind_speed < 20:
            wind_recom = '–°–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã, –≤—ã—Ö–æ–¥—è –∏–∑ –¥–æ–º–∞'
        else:
            wind_recom = '–ù–µ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è, –Ω–∞ —É–ª–∏—Ü—É –ª—É—á—à–µ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å'

        return (
            f'–°–µ–π—á–∞—Å –≤ {city} {weather}\n'
            f'üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n'
            f'üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n'
            f'{wind_recom}\n'
        )
    except Exception as e:
        return "–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ."

async def send_cat_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    breed_id = 'beng'
    url = f'https://api.thecatapi.com/v1/images/search?breed_ids={breed_id}'
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    if data and 'url' in data[0]:
                        cat_url = data[0]['url']
                    elif data:
                        cat_url = data[0].get('url')
                    else:
                        cat_url = None
                else:
                    cat_url = None
    except Exception as e:
        cat_url = None

    if cat_url:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=cat_url,
            caption='–í–æ—Ç –∫–æ—Ç–∏–∫ –±–µ–Ω–≥–∞–ª—å—Å–∫–æ–π –ø–æ—Ä–æ–¥—ãüò∫:'
        )
    else:
        await context.bot.send_message(chat_id=chat_id, text='–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞ –Ω—É–∂–Ω–æ–π –ø–æ—Ä–æ–¥—ã üê±')
async def send_random_digit(update: Update, context: ContextTypes.DEFAULT_TYPE, user_info):
    url = "https://www.randomnumberapi.com/api/v1.0/random?min=1&max=100&count=1"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    if isinstance(data, list) and data:
                        rand_num = data[0]
                        text = f"–í–∞—à–µ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {rand_num}"
                    else:
                        text = "–û—à–∏–±–∫–∞: API –Ω–µ –≤–µ—Ä–Ω—É–ª —á–∏—Å–ª–æ!"
                else:
                    text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞!"
    except Exception as e:
        text = "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª!"
    await context.bot.send_message(chat_id=user_info['chat_id'], text=text)

application = ApplicationBuilder().token(token).build()
application.add_handler(CommandHandler('start', wake_up))
application.add_handler(CommandHandler('myID', my_id))
application.add_handler(MessageHandler(filters.TEXT, say_hi))
application.add_handler(MessageHandler(filters.LOCATION, handle_location))
application.run_polling()